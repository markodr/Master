function [Y,Xf,Af] = ANN_Function(X,~,~)
%ANN_FUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-Sep-2017 08:25:48.
% 
% [Y] = ANN_Function(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 4xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [0.022119;0.014413;0.014708];
x1_step1_gain = [1.32438490598523;0.94111623914893;0.836817632751703];
x1_step1_ymin = -1;

% Layer 1
b1 = [-1.7285274659937837;-1.7293830810901467;0.3248688566746174;1.6310852474342055;0.51654217935721813;0.0055445581736717035;0.97812876648602376;0.39943591697885783;-2.635958127286171;3.1445962428478276];
IW1_1 = [3.7510556668911241 0.9052935968684841 -0.95639821902569755;1.8150319585503589 -2.3922218848170687 1.3900455855422273;-2.1387671872359784 -2.1536693036814478 2.6511730297311344;2.004757801819967 -0.79558263326646383 2.5606477420212155;-0.89097696242381286 3.897978291271277 0.038054201209405662;1.2011716733074269 -1.2482455452461363 -2.4710659966354722;1.4470344197653695 0.49644707703732371 -2.8381909272111918;2.343013292101328 -1.60977214587199 -2.1237864243633879;-1.2282239822508041 1.9770941105187128 1.6464965853083118;1.3136358527096459 -1.9636545016071267 -1.791863858296376];

% Layer 2
b2 = [-0.68372372304040618;0.76902712836197151;0.13107243977936914;0.024642808256030178];
LW2_1 = [2.4856788252550248 0.45215650980906863 -2.9972665838591941 2.3360938737222114 -2.7281644016259858 0.82545199735723496 0.52630289522703078 0.15328492488425399 -0.62704935542419926 0.27739870858312943;-0.89436740695415995 -0.81696621017608917 -1.6780508467058479 -0.95487867115334535 5.1897068894591198 0.24990319728843507 0.59578893899593433 -0.36269973696943869 0.25630424634209509 0.41399535701942458;-0.30428106390894866 0.076427149012172568 1.6237104124048631 2.5186788299025418 -1.2893397995526032 -1.4403951073462244 -3.3452847578316738 -1.5674233596782836 -0.94502794434994875 0.64061195531090576;-0.61291598645935874 -0.63759218173412191 3.6865586869616145 -2.4719700203926798 -3.0160588964184161 1.1128032643326611 0.99767095527406902 1.3692682246248242 0.68513516126621499 -1.3885478759846825];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numer = exp(n);
denom = sum(numer,1); 
denom(denom == 0) = 1;
a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
