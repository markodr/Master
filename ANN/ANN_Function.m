function [Y,Xf,Af] = ANN_Function(X,~,~)
%ANN_FUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 18-Sep-2017 21:14:14.
% 
% [Y] = ANN_Function(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 4xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [0.086756;0.237691;0.09173];
x1_step1_gain = [0.636256976557748;0.598083799315373;0.639494543512808];
x1_step1_ymin = -1;

% Layer 1
b1 = [2.1040168519081845;1.8665083320096605;1.4423731002766642;-1.0140529255385213;-0.044105630512851907;-1.3370162111627286;1.9525040541543583;1.6991566483146243;-2.781536998798662;-2.0087083414844908];
IW1_1 = [-2.199553436076366 0.79162769474600791 3.3930379468059466;0.14586530022070324 -2.1148630986183408 2.5138579535053824;-3.0899763787571994 0.28509812929362743 0.053522908788458431;1.7342058432690133 1.7620595700885484 1.7326420709149775;-1.2097011687658279 0.93907321243129294 -2.5831452509179607;-1.801997304750321 -2.315505323694258 0.26514375872591894;1.0683824396304624 -0.5827482561021281 3.0254146345784085;1.2807686621989072 -1.9239074660637958 2.3096029400170224;-1.6838788162161609 0.42545504612479945 2.0738852345105956;-3.8010209297172675 -2.0730678025902884 1.5476083495859594];

% Layer 2
b2 = [-0.20047406951413246;0.62380645641131494;-0.26898473992922295;-0.18025924874490146];
LW2_1 = [-2.1779133574137917 0.92881922779995885 -0.91070702097738632 -0.14378449496746015 -0.25296207281549732 1.3749824010349538 0.37873689208693673 1.5142289049122986 -0.38421996356307375 -2.0833467555539795;1.2120435291013025 -0.96676198391009804 0.17304719948109412 -0.47674943596258446 0.35924252964292119 -1.3873352885303458 -1.6428711053002829 -2.4901989070976853 0.11590226479753545 -2.5946901778872218;1.2012352931011803 0.30305507796147779 1.7692947402346226 -0.20612689020893568 -0.17846669049258057 1.1470218475836125 3.037793235630891 1.3811751188542796 -0.33916528345904579 0.54311142173825855;0.033983773405939485 0.99035538949770219 0.34650839552694435 0.54634135874875633 0.78718349308452074 0.62005955176236915 -1.7624192097109885 -0.71003292738971824 -0.09774481606309017 4.6618712772595794];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numer = exp(n);
denom = sum(numer,1); 
denom(denom == 0) = 1;
a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
